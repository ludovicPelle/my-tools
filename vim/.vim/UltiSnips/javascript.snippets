snippet l
console.log(${1});
endsnippet
snippet fo
for (var ${1:item} of ${2:list}) {
	${3}
}
endsnippet
snippet fi
for (var ${1:key} in ${2:list}) {
	if($2.hasOwnProperty($1)) {
		var ${3:item} = $2[$1];
		${4}
	}
}
endsnippet
snippet $e
.each(function(i, el) {
	${1}
});
endsnippet
snippet join
.join('${1:,}')
endsnippet
snippet contain
.contain(${1:'true'})
endsnippet
snippet map
.map(function(i, el) {
	${1}
	return ${2:el};
});
endsnippet
snippet fe "iter" w
.forEach(function(el, i, self) {
	${1}
});
endsnippet
snippet tc
try {
	${1}
} catch (e) {
	${2:console.error(e);}
}
endsnippet
snippet try
try {
	${1}
} catch (e) {
	${2:console.error(e);}
}
endsnippet
snippet filter "array js filter" w
filter(function(i,el) {
	return ${1:true};
});
endsnippet
snippet sort "array js sort" w
sort(function(a,b) {
	return parseInt(${1:a-b},10);
});
endsnippet
snippet dir
.directive('${1:dir}', $1Dir)
.controller('$1Ctrl', $1Ctrl);

/* @ngInject */
function $1Dir() {
	var linkFn = function(scope, element, attrs) {
		console.log('link', element);
	};
	return {
		templateUrl: '$3',
		controller: '$1Ctrl',
		controllerAs:'vm',
		link: linkFn
	};
}

/* @ngInject */
function $1Ctrl($2) {
	var vm =this;
}
endsnippet
snippet watch
${1:$scope}.$watch(${2:'myVar'}, function(n, o) {
	if (n === o || o === null) {
		return;
	}
	${3:console.log('watch ' + ${myVar},n,o);}
});
endsnippet
snippet ctrl
.controller('${1:}Ctrl', $1Ctrl);

/* @ngInject */
function $1Ctrl($2) {
	var vm =this;
}

endsnippet
snippet wow
${1:Text}`!p snip.rv = t[1].upper()`
endsnippet
snippet provider
.provider('${1}', $1Provider);

/* @ngInject */
function $1Provider(LoggerProvider${3}) {
	var self = this;
	var logger = LoggerProvider.getLogger('${4:LOG}');
	var log = logger.log;

	//init
	this.$get = $1;

	/* @ngInject */
	function $1(${6}) {
		var service = {
			${7://service}
		}
		return service;
	}
}
endsnippet

snippet fac
.factory('${1:Service}', $1);

/* @ngInject */
function $1 () {
	var service = {
		${3}
	};
	return service;
}
endsnippet
snippet ngfilter
.filter('${1:myService}',  $1Filter)
/* @ngInject */
function $1Filter($scope${3}) {
	return function(input, param) {
		${4}
		return input;
	};
}
endsnippet
snippet nmod
angular.module('${1:mod}', [
	${2}
])
endsnippet
snippet mod
angular.module('${1:mod}')
endsnippet
snippet clos
(function(${2}) {
	'use strict';
	${3}
})(${1});
endsnippet
snippet cfg
.config(${1:cfg})

/* @ngInject */
function cfg($2) {
	${3}
}
endsnippet
snippet route
.config(config);
/* @ngInject */
function config(RouterProvider, gettext) {
	RouterProvider.configureStates([
		{
			name: '${1:route}',
			title: gettext('${2:$1}'),
			url: '/${3:$1}',
			parent: '${4:layout}',
			referer: ${5:false},
			menu: {
				name: gettext('${6:$2}'),
				icon: null,
				name_classes: null,
				index: 1,
				check: function(vm) {
					return true;
				}
			},
			rules: [${6}],
			resolve: {
				${7}
			},
			views: {
				'content@$4': {
					templateUrl: 'app/$1/$1.html',
					controller: '$2Ctrl',
					controllerAs: 'vm',
					resolve: {
						${8}
					},
				},${9}
			},
		}
	])
}
endsnippet
snippet run
.run(${1:run})

/* @ngInject */
function $1($2) {
	${3}
}
endsnippet
snippet des
describe('${1}', function() {
	${2}
});
endsnippet
snippet then "promise callback" w
then(function(${1}) {
	${2}
	return $1;
}${3})
endsnippet
snippet it
it('should ${1:test}', function() {
	${2}
});
endsnippet
snippet page
'use_strict';
var ${1:Page} = {
	${2}
};
module.exports = $1;
endsnippet
snippet elcss
this.${1:element} = function() {return element(by.css(${2:selector}));}
endsnippet
snippet _elcss
${1:elem}: function() {
	return element(by.css('${2:class}'));
}
endsnippet
snippet elmod
this.${1:elem} = function() {return element(by.model('${2:model}'));}
endsnippet
snippet :elmod
${1:elem}: function() {
	return element(by.model('${2:model}'));
}
endsnippet
snippet elrep
this.${1:elem} = function() {return element(by.repeater('${2:rep}'));}
endsnippet
snippet :elrep
${1:elem}: function() {
	return element(by.repeater('${2:rep}'));
}
endsnippet
snippet fc "callback" w
function(${1}) {
	${2}
})
endsnippet
snippet f) "callback" w
function(${1}) {
	${2}
})
endsnippet
snippet f:
${1:fx}: function(${2}) {
	${3}
},
endsnippet
snippet f
function(${1}) {
	${2}
}
endsnippet
snippet doc
/**
* ${1:Description}
*/
endsnippet
snippet @au "@author email (First Last)"
@author ${1:`!v g:snips_author`} [${2:`!v g:snips_author_email`}]
endsnippet
snippet @li "@license Description"
@license ${1:MIT}$0
endsnippet
snippet @ver "@version Semantic version"
@version ${1:0.1.0}$0
endsnippet
snippet @fileo "@fileoverview Description" b
/**
* @fileoverview ${1:${VISUAL:A description of the file}}$0
*/
endsnippet
snippet @constr "@constructor"
@constructor
endsnippet
snippet @p "@param {Type} varname Description"
@param {${1:Type}} ${2:varname} ${3:Description}
endsnippet
snippet @ret "@return {Type} Description"
@return {${1:Type}} ${2:Description}
endsnippet
snippet @pri "@private"
@private
endsnippet
snippet @over "@override"
@override
endsnippet
snippet @pro "@protected"
@protected
endsnippet
snippet ngi
/* @ngInject */
endsnippet
